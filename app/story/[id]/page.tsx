import NotFound from "@/app/not-found"
import AnimateStory from "@/components/AnimateStory"
import BookmarkedButton from "@/components/BookmarkedButton"
import CreateReview from "@/components/CreateReview"
import DeleteReview from "@/components/DeleteReview"
import RemixButton from "@/components/RemixButton"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { buttonVariants } from "@/components/ui/button"
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle,
	DialogTrigger,
} from "@/components/ui/dialog"
import {
	HoverCard,
	HoverCardContent,
	HoverCardTrigger,
} from "@/components/ui/hover-card"
import {
	Tooltip,
	TooltipContent,
	TooltipProvider,
	TooltipTrigger,
} from "@/components/ui/tooltip"
import { TracingBeam } from "@/components/ui/tracing-beam"
import { cn } from "@/lib/utils"
import { getBookmarksId } from "@/utils/actions/database/getBookmarksId"
import { getReviews } from "@/utils/actions/database/getReviews"
import getSession from "@/utils/actions/database/getSession"
import { getStory, getStoryReturnType } from "@/utils/actions/database/getStory"
import getStoryBookmarkCount from "@/utils/actions/database/getStoryBookmarkCount"
import { getStoryTitle } from "@/utils/actions/database/getStoryTitle"
import { getUserTotalBookmarks } from "@/utils/actions/database/getUserTotalBookmarks"
import getUserInfo from "@/utils/actions/database/getUserinfo"
import { simplifyNumber } from "@/utils/simplifyNumber"
import { createClient } from "@/utils/supabase/server"
import { truncateString } from "@/utils/truncateString"
import { CalendarDays, MessageSquareText } from "lucide-react"
import { Metadata } from "next"
import Link from "next/link"

type StoryProps = {
	params: { id: string }
	searchParams: { isReview: boolean }
}
export async function generateMetadata({
	params,
}: StoryProps): Promise<Metadata> {
	try {
		const storyTitle = await getStoryTitle(params.id)
		return {
			title: `${storyTitle}`,
			description: `Discover "${storyTitle}", an interactive story on Plot Twist. Experience this interactive story where you control the narrative. Explore more interactive stories on Plot Twist today.`,
			keywords: `${storyTitle}, Plot Twist, interactive stories, AI, storytelling, user-generated content, narratives, creative writing, artificial intelligence, digital storytelling`,
		}
	} catch (error) {
		return {
			title: `Story Not Found`,
		}
	}
}

export default async function StoryDetails({
	params,
	searchParams,
}: StoryProps) {
	const supabase = createClient()
	const {
		data: { user },
	} = await supabase.auth.getUser()

	let user_id = user?.id
	if (!user_id) user_id = "no user"

	let story: getStoryReturnType | null

	try {
		story = await getStory(params.id)
	} catch (error) {
		return <NotFound />
	}

	let author = await getUserInfo(story?.user_id!!)

	// if the story is private and the current user is not the author, 404 since its nun of their business
	if (story?.published === false && author.data.user_id != user_id)
		return <NotFound />

	const bookmarks = await getBookmarksId(user_id)
	const bookmarkCount = await getStoryBookmarkCount(story!!.id)
	const isBookmarked = story && bookmarks.includes(story.id) ? true : false

	const userTotalBookmarks = story?.user_id
		? await getUserTotalBookmarks(story.user_id)
		: 0

	const accountInfo = [
		author.stories!!,
		author.data.star_count,
		userTotalBookmarks,
	]

	const icons = ["/icons/book.png", "/icons/star.png", "/icons/bookmark.png"]

	const reviews = await getReviews({
		storyId: Number(params.id),
		commentsCount: 20,
	})

	const currentUser = await getSession()

	const dateObj = new Date(author.data.created_at as string)
	const date = dateObj.toLocaleString("en-US", {
		month: "long",
		year: "numeric",
	})

	return (
		<main className="flex flex-col w-full gap-2 py-8 mx-auto my-12">
			<div className="flex flex-col w-full mx-auto">
				<TracingBeam className="pt-6 pb-10">
					<h1
						style={{
							textShadow: "0em 0em 0.3em rgba(255,255,255,0.6)",
						}}
						className="mb-5 text-4xl font-bold"
					>
						{story?.title!!}
					</h1>
					<p className="pb-5 font-mono 0 text-md ">Prompt: {story?.prompt}</p>
					<AnimateStory story={story!!.story!!} />
				</TracingBeam>
				<div className="flex flex-col w-full max-w-5xl mx-auto">
					<p className="mb-2 font-mono text-sm text-white/35">Generated by</p>
					<div className="flex flex-row mb-2">
						<HoverCard>
							<HoverCardTrigger asChild>
								<Link
									href={`/profile/${author.data.name}`}
									className="flex items-center gap-x-2"
								>
									<img
										alt="User profile"
										width={0}
										height={0}
										className="rounded-full w-7 h-7"
										src={author.data.image as string}
									></img>
									<div className="flex flex-col items-start gap-1">
										<p className="flex text-sm hover:underline">
											{author.data.name}
											{author.data.admin && (
												<img
													src="/icons/admin.png"
													className="w-3.5 h-3.5 flex ml-[0.4rem] my-auto"
												></img>
											)}
										</p>
										<div className="flex flex-row text-start">
											{accountInfo.map((info: any, index) => (
												<div className="flex items-start gap-0" key={index}>
													<img
														className="h-[0.8rem] w-[0.8rem] mr-1 invert"
														width={0}
														height={0}
														src={icons[index]}
														alt={"icon"}
													/>
													<span
														style={{
															textShadow: "0em 0em 0.4em white",
														}}
														className="mr-2 text-xs font-bold"
													>
														{simplifyNumber(info)}
													</span>
												</div>
											))}
										</div>
									</div>
								</Link>
							</HoverCardTrigger>
							<HoverCardContent className="ml-36">
								<div className="flex justify-between space-x-4">
									<div>
										<Avatar>
											<AvatarImage src={author.data.image as string} />
											<AvatarFallback>VC</AvatarFallback>
										</Avatar>
										<div className="pt-1.5 space-y-1">
											<h4 className="text-sm font-semibold">
												@{author.data.name}
											</h4>
											<p className="text-sm">
												{truncateString(author.data.bio as string, 60)}
											</p>
											<div className="flex items-center pt-2">
												<CalendarDays className="w-4 h-4 mr-2 opacity-70" />
												<span className="text-xs text-muted-foreground">
													{date}
												</span>
											</div>
										</div>
									</div>
									{author.data.admin && (
										<img
											src="/icons/admin.png"
											className="w-3.5 h-3.5 flex ml-[0.4rem] mb-auto"
										></img>
									)}
								</div>
							</HoverCardContent>
						</HoverCard>
					</div>
					<div className="flex items-center w-full gap-3 pt-4 mb-7">
						<TooltipProvider delayDuration={300}>
							<Tooltip>
								<TooltipTrigger>
									<RemixButton storyId={story!!.id} />
								</TooltipTrigger>
								<TooltipContent
									className="p-0 m-0 font-mono text-xs bg-transparent border-none outline-none font-extralight"
									side="bottom"
								>
									<p
										style={{
											textShadow: "0em 0em 0.3em white",
										}}
									>
										Remix generation
									</p>
								</TooltipContent>
							</Tooltip>
						</TooltipProvider>
						{story?.user_id != currentUser.user?.id && user_id != "no user" && (
							<>
								<TooltipProvider delayDuration={300}>
									<Tooltip>
										<TooltipTrigger>
											<Dialog defaultOpen={searchParams.isReview}>
												<DialogTrigger asChild>
													<Link
														className={cn(
															buttonVariants({ variant: "outline" }),
															"flex gap-2.5 px-8"
														)}
														href={""}
													>
														<MessageSquareText className="size-4"></MessageSquareText>
														{simplifyNumber(reviews.length!!)}
													</Link>
												</DialogTrigger>
												<DialogContent className="sm:max-w-[425px]">
													<DialogHeader>
														<DialogTitle>Add a review</DialogTitle>
													</DialogHeader>
													<CreateReview
														storyId={story?.id!!}
														authorId={currentUser!!.user!!.id}
													/>
												</DialogContent>
											</Dialog>
										</TooltipTrigger>
										<TooltipContent
											className="p-0 m-0 font-mono text-xs bg-transparent border-none outline-none z-2 font-extralight"
											side="bottom"
										>
											<p
												style={{
													textShadow: "0em 0em 0.3em white",
												}}
											>
												Add a review
											</p>
										</TooltipContent>
									</Tooltip>
								</TooltipProvider>
								<TooltipProvider delayDuration={300}>
									<Tooltip>
										<TooltipTrigger>
											<BookmarkedButton
												storyId={story!!.id}
												isBookmarked={isBookmarked}
												bookmarkCount={bookmarkCount}
											/>
										</TooltipTrigger>
										<TooltipContent
											className="p-0 m-0 font-mono text-xs bg-transparent border-none outline-none font-extralight"
											side="bottom"
										>
											<p
												style={{
													textShadow: "0em 0em 0.3em white",
												}}
											>
												{isBookmarked
													? "Remove from library"
													: "Add to library"}
											</p>
										</TooltipContent>
									</Tooltip>
								</TooltipProvider>
							</>
						)}
					</div>
					<p className="mb-2 font-mono text-sm text-white/60">Reviews</p>
					<div className="container h-[30vh] overflow-y-auto overflow-x-hidden border border-white/15 bg-black/10 border-solid rounded-lg p-5 flex flex-col items-start gap-3 w-full pt-4">
						{reviews!!.length == 0 ? (
							<>No reviews (yet...)</>
						) : (
							<>
								{reviews!!.map(async (rev, index) => (
									<div
										className="flex flex-col gap-2 mx-auto w-[60rem]"
										key={index}
									>
										<div className="my-2">
											<div className="flex justify-between">
												<div className="flex flex-row gap-2">
													<Link
														href={`/profile/${
															(await getUserInfo(rev.user_id)).data.name
														}`}
														className="flex gap-2"
													>
														<img
															className="w-6 h-6 rounded-full"
															width={0}
															height={0}
															src={
																(await getUserInfo(rev.user_id)).data!!
																	.image!! || "/icons/pfp1.png"
															}
															alt={"User profile"}
														/>

														<h2
															style={{
																textShadow: "0em 0em 0.3em white",
															}}
															className="w-full text-sm cursor-pointer hover:underline"
														>
															{(await getUserInfo(rev.user_id)).data.name}
														</h2>
													</Link>
												</div>
												{rev.user_id == currentUser.user?.id && (
													<DeleteReview
														commentId={rev.comment_id}
														storyId={story?.id!!}
													/>
												)}
											</div>
											<p className="text-[14px] p-[0.1rem] mt-0 font-mono text-white/50">
												{rev.comment}
											</p>
										</div>
										<div className="mx-auto w-full h-[0.01rem] bg-white/5"></div>
									</div>
								))}
							</>
						)}
					</div>
				</div>
			</div>
		</main>
	)
}
